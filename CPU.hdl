// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A instruction- when instruction[15]==0- put inst[0..14] in A-register, and output addressM the same. (decorde to 15)
    //C instruction- when instruction[15]==1- (decode- 1st op-code, 3 last are JUMP instructions, 3 before last is ??, 6 before this is the ALU's input)
    the MUX of the A-reg- if c==1 take input from the alu, and otherwise take from instruction

    Or(a=instruction[15], b=false, out=op_code)
    Mux16(a=ALU?, b=instruction[0..14], sel=op_code, out=A)
    Register(in=A, load=instruction[5], out=A) 
    //how to initialize a register? how to emmit it's previous memory?

    Mux16(a=A, b=inM, sel=)



    //PC:
    // if (reset) -> pc=0
    //else load=f(jump bits, ALU output)
    //	if no jump -> pc++
    //	if jump
    //		if unconditional jump (inst[0..2] == 				111) -> PC=A
    //		if conditional jump- check condition (check ALU output, if condition -> PC=A, else PC++)

    Inc16(in=pc, out=incpc)
    Mux(a=incpc, b=0, sel=reset, out=pc)

    Mux(a=, b=incpc, sel=instruction[0..2], out=pc)

}