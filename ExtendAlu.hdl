/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* 
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
    IN x[16],y[16],instruction[9];
    OUT out[16],zr,ng;
     
    PARTS:
    //if inst[7]==1 and inst[8]==1
	ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=normalout, zr=normalzr, ng=normalng);
	//if inst[7]==0
	Mul(a=x, b=y, out=mulout); //compute x*y
	//if inst[8]==0
	Mux16(a=y, b=x, sel=instruction[4], out=chosen);
	ShiftRight(in=chosen, out=rchosen);
	ShiftLeft(in=chosen, out=lchosen);
	Mux16(a=rchosen, b=lchosen, sel=instruction[5], out=shifted);
	Mux16(a=shifted, b=normalout, sel=instruction[8], out=ifnot7);
	Mux16(a=mulout, b=ifnot7, sel=instruction[7], out=muxout);
	Or16Way(in=muxout, out=notzr);
	Not(in=notzr, out=zr);
    And16(a=muxout, b[0..14]=false, b[15]=true, out=andout);
    Or16Way(in=andout, out=ng);
    And16(a=muxout, b=true, out=out);
}
